apply plugin: 'scala'

version = '0.9.6'

compileScala.options.encoding = 'UTF-8'
// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/scala'
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []
sourceSets.test.scala.srcDirs = [ 'src/test/java', 'src/test/scala' ]

ext {
  PRODUCT_NAME = 'SnappyData JDBC Stream Connector'
  createdBy = System.getProperty('user.name')
  if (rootProject.hasProperty('enablePublish')) {
    createdBy = 'TIBCO Software Inc.'
  }
  osArch = System.getProperty('os.arch')
  osName = org.gradle.internal.os.OperatingSystem.current()
  osVersion = System.getProperty('os.version')
  buildDate = new Date().format('yyyy-MM-dd HH:mm:ss Z')
  buildNumber = new Date().format('MMddyy')
  jdkVersion = System.getProperty('java.version')
  gitCmd = "git --git-dir=${project.projectDir}/.git --work-tree=${project.projectDir}"
  gitBranch = "${gitCmd} rev-parse --abbrev-ref HEAD".execute().text.trim()
  commitId = "${gitCmd} rev-parse HEAD".execute().text.trim()
  sourceDate = "${gitCmd} log -n 1 --format=%ai".execute().text.trim()
}

dependencies {
  compile 'org.scala-lang:scala-library:' + scalaVersion
  compile 'org.scala-lang:scala-reflect:' + scalaVersion
  compile 'org.scala-lang:scala-compiler:' + scalaVersion

  compile 'org.slf4j:slf4j-api:' + slf4jVersion
  compile 'org.slf4j:slf4j-log4j12:' + slf4jVersion
  compile 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
  compile 'org.slf4j:jul-to-slf4j:' + slf4jVersion
  compile 'com.microsoft.sqlserver:mssql-jdbc:' + mssqlVersion

  compile (project(':snappy-core_' + scalaBinaryVersion)) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-mllib_' + scalaBinaryVersion)
    exclude(group: 'org.eclipse.jetty', module: 'jetty-servlet')
  }
  compile project(':snappy-spark:snappy-spark-core_' + scalaBinaryVersion)
  compile project(':snappy-spark:snappy-spark-catalyst_' + scalaBinaryVersion)
  compile project(':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion)
  compile project(':snappy-spark:snappy-spark-hive_' + scalaBinaryVersion)
  compile project(':snappy-spark:snappy-spark-streaming_' + scalaBinaryVersion)

  testRuntime (project(':snappy-core_' + scalaBinaryVersion)) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-mllib_' + scalaBinaryVersion)
    exclude(group: 'org.eclipse.jetty', module: 'jetty-servlet')
  }
  testRuntime project(':snappy-cluster_' + scalaBinaryVersion)
  testCompile (project(path: ':snappy-core_' + scalaBinaryVersion, configuration: 'testOutput')) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-mllib_' + scalaBinaryVersion)
    exclude(group: 'org.eclipse.jetty', module: 'jetty-servlet')
  }
  testCompile project(':snappy-cluster_' + scalaBinaryVersion)
  testCompile project(path: ':snappy-core_' + scalaBinaryVersion, configuration: 'testOutput')
  testCompile project(path: ':snappy-cluster_' + scalaBinaryVersion, configuration: 'testOutput')
  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"
  testRuntime "org.pegdown:pegdown:${pegdownVersion}"

  compile group: 'org.twitter4j', name: 'twitter4j-stream', version: twitter4jVersion
}

scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

test.dependsOn ':cleanJUnit'
check.dependsOn.clear()
check.dependsOn test, scalaTest

archivesBaseName = 'snappydata-jdbc-stream-connector_' + scalaBinaryVersion
